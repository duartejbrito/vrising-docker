#!/bin/bash

server_path=/mnt/vrising/server
data_path=/mnt/vrising/data

# log levels
debug=50
info=40
warn=30
error=20
critical=10
fatal=5
log_level=${log_level:-$info}

debug()    { logstd $debug    "DEBUG - [$$] - $*"; }
info()     { logstd $info     "INFO - $*"; }
warn()     { logstd $warn     "WARN - $*"; }
error()    { logerr $error    "ERROR - $*"; }
critical() { logerr $critical "CRITICAL - $*"; }
fatal()    { logerr $fatal    "FATAL - $*"; exit 1; }

logstd() {
  local log_at_level
  log_at_level="$1"; shift
  printline "$log_at_level" "$*"
}

logerr() {
  local log_at_level
  log_at_level="$1"; shift
  printline "$log_at_level" "$*" >&2
}

printline() {
  local log_at_level
  local log_data
  log_at_level="$1"; shift
  log_data="$*"

  if [ "$log_at_level" -le "$log_level" ]; then
      echo "$log_data"
  fi
}

start_wine() {
  debug "Starting wine"
  if [ ! -d /root/.wine ]; then
    debug "wine is not ready, initializing..."
    WINEARCH=win64 winecfg > /dev/null 2>&1
    sleep 5
    debug "wine initialized"
  fi
}

apply_permissions() {
  debug "Applying permissions"
  mkdir -p /root/.steam
  chmod -R 777 /root/.steam
  mkdir "$data_path/Settings"
}

configure_timezone() {
  debug "Setup timezone"
  export TZ
  if [ ! -f "/usr/share/zoneinfo/$TZ" ]; then
      warn "Unknown timezone $TZ - defaulting to Etc/UTC"
      TZ="Etc/UTC"
  fi
  ln -snf "/usr/share/zoneinfo/$TZ" /etc/localtime
  echo "$TZ" > /etc/timezone
  dpkg-reconfigure -f noninteractive tzdata
  info "Setting timezone $TZ"
}

install_server() {
  debug "Install server"
  if [ ! -e "/root/.wine/drive_c/steamcmd/steaminstalled.txt" ]; then
    info "Updating V-Rising Dedicated Server files..."
    wine "C:/steamcmd/steamcmd.exe" +force_install_dir "Z:$server_path" +login anonymous +app_update 1829350 validate +quit
    touch /root/.wine/drive_c/steamcmd/steaminstalled.txt
  fi
}

handleHostSettings() {
  debug "Handling Server Host Settings"
  handleSettings "ServerHostSettings" ${!VRisingHost_@}
}

handleGameSettings() {
  debug "Handling Server Game Settings"
  handleSettings "ServerGameSettings" ${!VRisingGame_@}
}

handleSettings() {
  local name=$1
  shift

  if [ ! -f "$data_path/Settings/$name.json" ]; then
    info "$data_path/Settings/$name.json not found. Copying default file."
    cp "$server_path/VRisingServer_Data/StreamingAssets/Settings/$name.json" "$data_path/Settings/"
  fi
  
  for var in "$@"; do
    IFS='_' read -r -a path <<< "$var"
    path=${path[@]:1}
    debug "Overrinding $name.${path// /.}: ${!var}"
    cat <<< $( jq ".${path// /.} = ${!var}" "$data_path/Settings/$name.json" ) > "$data_path/Settings/$name.json"
  done
}

write_adminlist() {
  write_serverlist admin "$AdminList_Ids"
}

write_serverlist() {
  local type
  local id_list
  local list_file
  type=$1
  id_list=$2
  list_file="${server_path}/VRisingServer_Data/StreamingAssets/Settings/${type}list.txt"

  if [ -n "$id_list" ]; then
    info "Writing $list_file"
    echo "// List $type players ID  ONE per line" > "$list_file"
    echo "$id_list" | sed -e "s/ \\+/\\n/g" >> "$list_file"
  fi
}

handle_mods() {
  debug "Handling Mods"
  local modsToInstall=()
  local mod_var_name
  for mod_envs in ${!Mod_@}; do
    mod_var_name="$(cut -d'_' -f1 <<<"$mod_envs")_$(cut -d'_' -f2 <<<"$mod_envs")"
    if [[ ! " ${modsToInstall[*]} " =~ " ${mod_var_name} " ]]; then
      modsToInstall+=" ${mod_var_name}"
    fi
  done

  local modName
  local modNamespace
  local modSource
  local modDestination
  for mod in ${modsToInstall[@]}; do
    modName=$mod\_Name
    modNamespace=$mod\_Namespace
    modSource=$mod\_Source
    modDestination=$mod\_Destination
    
    debug "Mod found"
    debug "${modName}: ${!modName}"
    debug "${modNamespace}: ${!modNamespace}"
    debug "${modSource}: ${!modSource}"
    debug "${modDestination}: ${!modDestination}"
    modDownloadUrl=$(download_url_mod_store ${!modName} ${!modNamespace})

    debug "DownloadUrl: ${modDownloadUrl}"
    download_extract_sync_mod_store ${!modName} ${modDownloadUrl} ${!modSource} ${!modDestination}
    info "${!modName} mod installed on $server_path${!modDestination}"
  done
}

download_url_mod_store() {
  local modName=$1
  local modNamespace=$2
  local api_response
  local download_url

  if ! api_response=$(curl -sfSL -H "accept: application/json" "https://v-rising.thunderstore.io/api/experimental/package/${modNamespace}/${modName}/"); then
    fatal "Error: could not retrieve ${modNamespace}/${modName} release info from Thunderstore.io API"
  fi
  download_url=$(jq -r  ".latest.download_url" <<< "$api_response" )
  echo "$download_url"
}

download_extract_sync_mod_store() {
  local modName=$1
  local modDownloadUrl=$2
  local modSource=$3
  local modDestination=$4

  local download_path=/tmp/dl/mods/$modName
  local zipfile=$modName.zip
  local archive_file="$download_path/$zipfile"
  mkdir -p "$download_path"
  curl -sfSL -o "$archive_file" "$modDownloadUrl"

  local extracted_path="$download_path/extracted"
  rm -rf "$extracted_path"
  mkdir -p "$extracted_path"
  unzip -q -d "$extracted_path/" "$archive_file"

  mkdir -p "$server_path$modDestination"
  rsync -q -a --itemize-changes "$extracted_path$modSource" "$server_path$modDestination"
}